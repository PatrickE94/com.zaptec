/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/chargehistory': {
    /**
     * Get a list of all completed charge sessions accessible by the current user matching
     * the filter options.
     * @description Default page size is 500 and maximum is 5000.
     */
    get: {
      /**
       * Get a list of all completed charge sessions accessible by the current user matching
       * the filter options.
       * @description Default page size is 500 and maximum is 5000.
       */
      parameters: {
        /**
         * @description 0 = group by charger (default), 1 = group by calendar day, 2 = group by user.
         *
         * 0 = Charger
         *
         * 1 = Day
         *
         * 2 = User
         */
        /**
         * @description Bitflag: 0 = session summary (default), 1 = include detailed session energy data.
         *
         * 0 = Summary
         *
         * 1 = EnergyDetails
         */
        /** @description Name of the property used to sort the result. */
        /** @description Set to true to sort items in descending order. */
        /** @description Number of items to return per page. */
        /** @description The page index to return, first page is 0. */
        /** @description If true, and your user has access, include disabled objects. */
        /** @description Get or set a list of item Id's that will be excluded from the result. */
        query: {
          InstallationId?: string;
          UserId?: string;
          ChargerId?: string;
          From?: string;
          To?: string;
          GroupBy?: components['schemas']['AggregateGroup'];
          DetailLevel?: components['schemas']['DetailLevelFlags'];
          SortProperty?: string;
          SortDescending?: boolean;
          PageSize?: number;
          PageIndex?: number;
          IncludeDisabled?: boolean;
          Exclude?: string[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['SessionListModelPagedData'];
            'application/json': components['schemas']['SessionListModelPagedData'];
            'text/json': components['schemas']['SessionListModelPagedData'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargehistory/installationreport': {
    /**
     * Get a usage report matching the provided filter options (require installation owner permissions).
     * @deprecated
     * @description Please note that this GET version of installationreport has been deprecated, use the
     * POST version instead. GET requests are limited by 2048 character URL length, and will
     * fail if the provided filted exceeds this length.
     */
    get: {
      /**
       * Get a usage report matching the provided filter options (require installation owner permissions).
       * @deprecated
       * @description Please note that this GET version of installationreport has been deprecated, use the
       * POST version instead. GET requests are limited by 2048 character URL length, and will
       * fail if the provided filted exceeds this length.
       */
      parameters: {
        /**
         * @description
         *
         * 0 = User
         *
         * 1 = Charger
         *
         * 2 = ChargeCardName
         */
        query: {
          FromDate?: string;
          EndDate?: string;
          InstallationId?: string;
          UserIds?: string[];
          ChargerIds?: string[];
          GroupBy?: components['schemas']['GroupByOptions'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomTotalChargerReportModel'];
            'application/json': components['schemas']['CustomTotalChargerReportModel'];
            'text/json': components['schemas']['CustomTotalChargerReportModel'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
    /** Get a usage report matching the provided filter options (require installation owner permissions). */
    post: {
      /** Get a usage report matching the provided filter options (require installation owner permissions). */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['InstallationChargeHistoryModel'];
          'application/json': components['schemas']['InstallationChargeHistoryModel'];
          'text/json': components['schemas']['InstallationChargeHistoryModel'];
          'application/*+json': components['schemas']['InstallationChargeHistoryModel'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['CustomTotalChargerReportModel'];
            'application/json': components['schemas']['CustomTotalChargerReportModel'];
            'text/json': components['schemas']['CustomTotalChargerReportModel'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargers': {
    /**
     * Get all chargers accessible by current user matching the filter options.
     * @description By default the first 500 items will be returned. Page though results using pageIndex or
     * change pageSize to return more items. The maximum pageSize is 5000.
     */
    get: {
      /**
       * Get all chargers accessible by current user matching the filter options.
       * @description By default the first 500 items will be returned. Page though results using pageIndex or
       * change pageSize to return more items. The maximum pageSize is 5000.
       */
      parameters: {
        /**
         * @description Return only charge points where current user has any of the provided user roles. Note
         * that this is a bit-flag and multiple roles can be provided.
         *
         * 0 = None
         *
         * 1 = User
         *
         * 2 = Owner
         *
         * 4 = Maintainer
         *
         * 8 = Administrator
         *
         * 15 = Any
         *
         * 16 = Onboarding
         *
         * 32 = DeviceAdministrator
         *
         * 64 = PartnerAdministrator
         *
         * 128 = Technical
         *
         * 256 = InternalData
         */
        /**
         * @description Return only charge points of the provided type.
         *
         * 0 = Unknown
         *
         * 1 = Smart
         *
         * 2 = Portable
         *
         * 3 = HomeApm
         *
         * 4 = Apollo
         *
         * 5 = OtherApm
         *
         * 6 = GenericApm
         *
         * 7 = HanApm
         */
        /**
         * @description Return only chargers installed in installations of this time.
         *
         * 0 = Pro
         *
         * 1 = Smart
         */
        /**
         * @description A filter used to filter items. The filter may be applied to multiple
         * properties depending on the object type.
         */
        /**
         * @description If true objects are only returned with their basic properties like
         * Id and name.
         */
        /** @description Name of the property used to sort the result. */
        /** @description Set to true to sort items in descending order. */
        /** @description Number of items to return per page. */
        /** @description The page index to return, first page is 0. */
        /** @description If true, and your user has access, include disabled objects. */
        /** @description Get or set a list of item Id's that will be excluded from the result. */
        query: {
          Roles?: components['schemas']['UserRoles'];
          DeviceType?: components['schemas']['DeviceType'];
          InstallationType?: components['schemas']['InstallationTypeCode'];
          NameFilter?: string;
          ReturnIdNameOnly?: boolean;
          SortProperty?: string;
          SortDescending?: boolean;
          PageSize?: number;
          PageIndex?: number;
          IncludeDisabled?: boolean;
          Exclude?: string[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ChargerListModelPagedData'];
            'application/json': components['schemas']['ChargerListModelPagedData'];
            'text/json': components['schemas']['ChargerListModelPagedData'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargers/{id}': {
    /** Get the provided charger (requires owner or service permissions). */
    get: {
      /** Get the provided charger (requires owner or service permissions). */
      parameters: {
        /** @description Charger Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ZapChargerViewModel'];
            'application/json': components['schemas']['ZapChargerViewModel'];
            'text/json': components['schemas']['ZapChargerViewModel'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargers/{id}/update': {
    /**
     * Update charger properties (requires owner or service permissions).
     * @description <br>
     *                 maxChargeCurrent and minChargeCurrent should in general not be used. These are available for special
     *                 use cases, where an external party need to override the Zaptec load balancer. Doing this can case
     *                 unforeseen behavior. It is recommended to control the charging system as a whole using the installations
     *                 AvailableCurrent settings.
     *
     * <br>
     *                 Offline current/phase override should only be done in special cases where charging stations should not
     *                 automatically optimize offline current/phases. If offline current/phase is overriden,
     *                 ensure that the sum of all overriden values in an installation does not exceed the fuse limit.
     *
     * <br>
     *                 Set OfflineChargeCurrent to -1 to enable automatic allocation of offline current.
     *                 Any other value between 0 and 32 will override the offline charge current. Null values are ignored.
     *
     * <br>
     *                 Set OfflineChargePhase to 0 ({Phases.None}) to enable automatic allocation of offline phase.
     *                 Any other valid value will override the offline charge phase allocation. Null values are ignored.
     *
     * <br>
     *                 meterValueInterval determines the data interval used for reporting periodic data. It is recommended
     *                 that this is kept at the default 30 minutes. Setting this to 0 will disable periodic energy
     *                 reporting, affecting both data reported by sessions and the signed meter values reported by
     *                 the charger.
     */
    post: {
      /**
       * Update charger properties (requires owner or service permissions).
       * @description <br>
       *                 maxChargeCurrent and minChargeCurrent should in general not be used. These are available for special
       *                 use cases, where an external party need to override the Zaptec load balancer. Doing this can case
       *                 unforeseen behavior. It is recommended to control the charging system as a whole using the installations
       *                 AvailableCurrent settings.
       *
       * <br>
       *                 Offline current/phase override should only be done in special cases where charging stations should not
       *                 automatically optimize offline current/phases. If offline current/phase is overriden,
       *                 ensure that the sum of all overriden values in an installation does not exceed the fuse limit.
       *
       * <br>
       *                 Set OfflineChargeCurrent to -1 to enable automatic allocation of offline current.
       *                 Any other value between 0 and 32 will override the offline charge current. Null values are ignored.
       *
       * <br>
       *                 Set OfflineChargePhase to 0 ({Phases.None}) to enable automatic allocation of offline phase.
       *                 Any other valid value will override the offline charge phase allocation. Null values are ignored.
       *
       * <br>
       *                 meterValueInterval determines the data interval used for reporting periodic data. It is recommended
       *                 that this is kept at the default 30 minutes. Setting this to 0 will disable periodic energy
       *                 reporting, affecting both data reported by sessions and the signed meter values reported by
       *                 the charger.
       */
      parameters: {
        /** @description Charge point ID */
        path: {
          id: string;
        };
      };
      /** @description Charger properties to update */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ChargerExternalUpdateModel'];
          'application/json': components['schemas']['ChargerExternalUpdateModel'];
          'text/json': components['schemas']['ChargerExternalUpdateModel'];
          'application/*+json': components['schemas']['ChargerExternalUpdateModel'];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargers/{id}/state': {
    /**
     * Get the current state properties (observations) for the provided charger
     * (requires owner or service permissions).
     * @description StateId's may differ by charger model. Current generation ZapCharger
     * Smart support {Observations} from https://api.zaptec.com/api/constants.
     */
    get: {
      /**
       * Get the current state properties (observations) for the provided charger
       * (requires owner or service permissions).
       * @description StateId's may differ by charger model. Current generation ZapCharger
       * Smart support {Observations} from https://api.zaptec.com/api/constants.
       */
      parameters: {
        /** @description Charger Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ChargerStateModel'][];
            'application/json': components['schemas']['ChargerStateModel'][];
            'text/json': components['schemas']['ChargerStateModel'][];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargers/{id}/sendCommand/{commandId}': {
    /**
     * Send a command to the charger (require owner or service permissions).
     * @description When sending command 10001 (deauthorize and stop), caller is responsible for not
     * authorizing new charge requests until the command is completed.
     */
    post: {
      /**
       * Send a command to the charger (require owner or service permissions).
       * @description When sending command 10001 (deauthorize and stop), caller is responsible for not
       * authorizing new charge requests until the command is completed.
       */
      parameters: {
        /** @description Charger Id */
        /**
         * @description Supported command Ids are: 102 - restart charger, 200 - upgrade firmware,
         * 506 - stop/pause charging (requires firmware > 3.2), 507 - resume charging
         * (requires firmware > 3.2), 10001 - deauthorize and stop charging.
         */
        path: {
          id: string;
          commandId: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/chargerFirmware/installation/{installationId}': {
    /** Get firmware details for all chargers in the installation. */
    get: {
      /** Get firmware details for all chargers in the installation. */
      parameters: {
        path: {
          installationId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['InstallationChargerFirmwareModel'][];
            'application/json': components['schemas']['InstallationChargerFirmwareModel'][];
            'text/json': components['schemas']['InstallationChargerFirmwareModel'][];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/constants': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ConstantsModel'];
            'application/json': components['schemas']['ConstantsModel'];
            'text/json': components['schemas']['ConstantsModel'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/installation': {
    /**
     * Get all installations accessible by the current user matching the filter options.
     * @description By default the first 500 items will be returned. Page though results using pageIndex or
     * change pageSize to return more items. The maximum pageSize is 5000.
     */
    get: {
      /**
       * Get all installations accessible by the current user matching the filter options.
       * @description By default the first 500 items will be returned. Page though results using pageIndex or
       * change pageSize to return more items. The maximum pageSize is 5000.
       */
      parameters: {
        /**
         * @description Return only installations where current user has any of the provided user roles. Note
         * that this is a bit-flag and multiple roles can be provided.
         *
         * 0 = None
         *
         * 1 = User
         *
         * 2 = Owner
         *
         * 4 = Maintainer
         *
         * 8 = Administrator
         *
         * 15 = Any
         *
         * 16 = Onboarding
         *
         * 32 = DeviceAdministrator
         *
         * 64 = PartnerAdministrator
         *
         * 128 = Technical
         *
         * 256 = InternalData
         */
        /**
         * @description Return only installations of the provided type.
         *
         * 0 = Pro
         *
         * 1 = Smart
         */
        /** @description Excludes installations that is visible for the user group identified by lookup key. */
        /**
         * @description A filter used to filter items. The filter may be applied to multiple
         * properties depending on the object type.
         */
        /**
         * @description If true objects are only returned with their basic properties like
         * Id and name.
         */
        /** @description Name of the property used to sort the result. */
        /** @description Set to true to sort items in descending order. */
        /** @description Number of items to return per page. */
        /** @description The page index to return, first page is 0. */
        /** @description If true, and your user has access, include disabled objects. */
        /** @description Get or set a list of item Id's that will be excluded from the result. */
        query: {
          Roles?: components['schemas']['UserRoles'];
          InstallationType?: components['schemas']['InstallationTypeCode'];
          ExcludeIfVisibleForUserGroupLookupKey?: string;
          NameFilter?: string;
          ReturnIdNameOnly?: boolean;
          SortProperty?: string;
          SortDescending?: boolean;
          PageSize?: number;
          PageIndex?: number;
          IncludeDisabled?: boolean;
          Exclude?: string[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['InstallationModelPagedData'];
            'application/json': components['schemas']['InstallationModelPagedData'];
            'text/json': components['schemas']['InstallationModelPagedData'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/installation/{id}': {
    /**
     * Get the provided installation.
     * Installation details level depends on the current user permissions.
     */
    get: {
      /**
       * Get the provided installation.
       * Installation details level depends on the current user permissions.
       */
      parameters: {
        /**
         * @description 0 = no extra details (default), 1 = include list of users that are present in the installation's charge history.
         *
         * 0 = Default
         *
         * 1 = UserDetails
         */
        query: {
          DetailLevel?: components['schemas']['InstallationDetailLevelFlags'];
        };
        /** @description Installation Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['InstallationModel'];
            'application/json': components['schemas']['InstallationModel'];
            'text/json': components['schemas']['InstallationModel'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/installation/{id}/messagingConnectionDetails': {
    /**
     * Get connection details for connecting to the live AMQP 1.0 subscription
     * for charger events on an installation (requires owner or service permissions).
     */
    get: {
      /**
       * Get connection details for connecting to the live AMQP 1.0 subscription
       * for charger events on an installation (requires owner or service permissions).
       */
      parameters: {
        /** @description Installation Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ConnectionDescriptor'];
            'application/json': components['schemas']['ConnectionDescriptor'];
            'text/json': components['schemas']['ConnectionDescriptor'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/installation/{id}/update': {
    /**
     * Update installation properties (require owner or service permissions).
     * @description Provide <strong>either</strong> AvailableCurrent or AvailableCurrentPhase1,
     * AvailableCurrentPhase2 and AvailableCurrentPhase3.
     * <br>
     * Available current update will instantly trigger a phase and load balancing of the
     * installation. Resulting adjustments of charging stations phase and current
     * settings will be effectuated by vehicles within 5 seconds. It is recommended that
     * this setting is not updated more often than once every 15 minutes, as continuous
     * changes of charge current and phase may lead to the vehicle aborting the charge
     * session. Available current is limited to the installations configured max current
     * (circuit breaker current). If available current is set to {null} (property
     * is not provided), the installations available current is removed and
     * installation will revert to use its max current setting.
     */
    post: {
      /**
       * Update installation properties (require owner or service permissions).
       * @description Provide <strong>either</strong> AvailableCurrent or AvailableCurrentPhase1,
       * AvailableCurrentPhase2 and AvailableCurrentPhase3.
       * <br>
       * Available current update will instantly trigger a phase and load balancing of the
       * installation. Resulting adjustments of charging stations phase and current
       * settings will be effectuated by vehicles within 5 seconds. It is recommended that
       * this setting is not updated more often than once every 15 minutes, as continuous
       * changes of charge current and phase may lead to the vehicle aborting the charge
       * session. Available current is limited to the installations configured max current
       * (circuit breaker current). If available current is set to {null} (property
       * is not provided), the installations available current is removed and
       * installation will revert to use its max current setting.
       */
      parameters: {
        /** @description Installation Id */
        path: {
          id: string;
        };
      };
      /** @description Installation properties to update */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['InstallationExternalUpdateModel'];
          'application/json': components['schemas']['InstallationExternalUpdateModel'];
          'text/json': components['schemas']['InstallationExternalUpdateModel'];
          'application/*+json': components['schemas']['InstallationExternalUpdateModel'];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/installation/{id}/hierarchy': {
    /**
     * Get an installation and its circuit and charger hierarchy
     * (requires owner or service permissions).
     * Please note that only basic properties of the returned model will be populated.
     */
    get: {
      /**
       * Get an installation and its circuit and charger hierarchy
       * (requires owner or service permissions).
       * Please note that only basic properties of the returned model will be populated.
       */
      parameters: {
        /** @description Installation Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['InstallationTreeModel'];
            'application/json': components['schemas']['InstallationTreeModel'];
            'text/json': components['schemas']['InstallationTreeModel'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/session/{id}': {
    /** Get session details. */
    get: {
      /** Get session details. */
      parameters: {
        /** @description Session Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['SessionEndData'];
            'application/json': components['schemas']['SessionEndData'];
            'text/json': components['schemas']['SessionEndData'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/session/{id}/priority': {
    /**
     * Set session priority (require owner or service permission).
     * @description Method allows a charge session to be given priority. Prioritized sessions will be
     * allocated before unprioritized sessions, and will at a minimum be allowed to consume
     * the prioritized current. Please note that priority can be given to any number of
     * sessions, it is up to the caller to ensure that the installation and circuit has enough
     * available current to provide the prioritized current. In case there is not enough
     * available current, prioritized chargers are allocated on a first come first served
     * basis. After all prioritized sessions are allocated, the rest of the available current
     * is shared amongst the unprioritized sessions.
     */
    post: {
      /**
       * Set session priority (require owner or service permission).
       * @description Method allows a charge session to be given priority. Prioritized sessions will be
       * allocated before unprioritized sessions, and will at a minimum be allowed to consume
       * the prioritized current. Please note that priority can be given to any number of
       * sessions, it is up to the caller to ensure that the installation and circuit has enough
       * available current to provide the prioritized current. In case there is not enough
       * available current, prioritized chargers are allocated on a first come first served
       * basis. After all prioritized sessions are allocated, the rest of the available current
       * is shared amongst the unprioritized sessions.
       */
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ChargePriority'];
          'application/json': components['schemas']['ChargePriority'];
          'text/json': components['schemas']['ChargePriority'];
          'application/*+json': components['schemas']['ChargePriority'];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
  '/api/userGroups/{id}/messagingConnectionDetails': {
    /**
     * Get connection details for connecting to the live AMQP 1.0 subscription
     * for charger events on installations belonging to group (requires owner or service permissions).
     */
    get: {
      /**
       * Get connection details for connecting to the live AMQP 1.0 subscription
       * for charger events on installations belonging to group (requires owner or service permissions).
       */
      parameters: {
        /** @description UserGroup Id */
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['ConnectionDescriptor'];
            'application/json': components['schemas']['ConnectionDescriptor'];
            'text/json': components['schemas']['ConnectionDescriptor'];
          };
        };
        /** @description Unauthorized */
        401: never;
        /** @description Forbidden */
        403: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: int32
     * @description 0 = group by charger (default), 1 = group by calendar day, 2 = group by user.
     *
     * 0 = Charger
     *
     * 1 = Day
     *
     * 2 = User
     * @enum {integer}
     */
    AggregateGroup: 0 | 1 | 2;
    ChargePriority: {
      prioritizedPhases?: components['schemas']['MaxPhase'];
      /** Format: double */
      prioritizedCurrent?: number | null;
    };
    ChargerExternalUpdateModel: {
      /**
       * Format: double
       * @description Adjustable between 0 and 32A. If charge current is below the charger minimum charge
       * current (usually 6A), no charge current will be allocated.
       */
      maxChargeCurrent?: number | null;
      maxChargePhases?: components['schemas']['MaxPhase'];
      /**
       * Format: double
       * @description The minimum allocated charge current. If there is not enough current available to
       * provide the chargers minimum current it will not be able to charge. Usually set to
       * match the vehicle minimum current for charging (defaults to 6A).
       */
      minChargeCurrent?: number | null;
      /**
       * Format: double
       * @description Adjustable between 0 and 32A. If offline charge current is below the charger minimum charge
       * current (usually 6A), no charge current will be allocated when offline.
       * Offline current override should only be done in special cases where charging
       * stations should not automatically optimize offline current. In most cases
       * this setting should be set to -1 to allow ZapCloud to optimise offline current.
       * If -1, offline current will be automatically allocated.
       */
      offlineChargeCurrent?: number | null;
      offlineChargePhase?: components['schemas']['Phases'];
      /**
       * Format: int32
       * @description The interval in seconds for a charger to report meter values.
       * Defaults to 900 seconds for Pro and 3600 seconds for Go
       */
      meterValueInterval?: number | null;
    };
    ChargerListModel: {
      /**
       * Format: uuid
       * @description Get the unique identifier of the charge point.
       */
      id?: string;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {DeviceId} instead.
       */
      mid?: string | null;
      /** @description Get the deviceId (serialNo) of the charging stations used with the charge point. */
      deviceId?: string | null;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {Name} instead.
       */
      serialNo?: string | null;
      /** @description Get the name of the charge point. */
      name?: string | null;
      /**
       * Format: date-time
       * @description Get the date and time the installation was created.
       */
      createdOnDate?: string | null;
      /**
       * Format: uuid
       * @description Get the unique identifier the charge point is installed in.
       */
      circuitId?: string | null;
      /** @description Get a value indicating whether the charge point is active. */
      active?: boolean | null;
      currentUserRoles?: components['schemas']['UserRoles'];
      /**
       * @description Get the charger PIN code. This will only be provided if your user is system owner
       * for the charge point.
       */
      pin?: string | null;
      /**
       * Format: uuid
       * @description Get the unique identifier of the chargers firmware template.
       */
      templateId?: string | null;
      propertyOcppUrl?: string | null;
      propertyOcppPassword?: string | null;
      propertyPinOfflinePhase?: boolean | null;
      propertyAuthenticationDisabled?: boolean | null;
      hasSessions?: boolean | null;
      propertyOfflinePhaseOverride?: components['schemas']['Phases'];
      /** Format: double */
      propertyOfflineCurrentOverride?: number | null;
      /** Format: date-time */
      propertyOcppVerboseLogUntil?: string | null;
      propertyOcppDefaultIdTag?: string | null;
      /** Format: int32 */
      propertyOcppWebSocketPingInterval?: number | null;
      /** Format: double */
      propertyPrioritizedCurrent?: number | null;
      propertyPrioritizedPhases?: components['schemas']['MaxPhase'];
      /** Format: double */
      propertyMaxSinglePhaseChargeCurrent?: number | null;
      /** Format: int32 */
      propertyOcppAvailability?: number | null;
      /** Format: int32 */
      propertyOcppOfflineListVersion?: number | null;
      /** Format: double */
      signedMeterValueKwh?: number | null;
      signedMeterValue?: string | null;
      deviceType?: components['schemas']['DeviceType'];
      installationName?: string | null;
      /** Format: uuid */
      installationId?: string | null;
      authenticationType?: components['schemas']['InstallationAuthenticationType'];
      isAuthorizationRequired?: boolean | null;
      operatingMode?: components['schemas']['ChargerOperatingMode'];
      isOnline?: boolean;
      warnings?: string | null;
    };
    ChargerListModelPagedData: {
      /** Format: int32 */
      pages?: number;
      data?: components['schemas']['ChargerListModel'][] | null;
      message?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = Disconnected
     *
     * 2 = Connected_Requesting
     *
     * 3 = Connected_Charging
     *
     * 5 = Connected_Finished
     * @enum {integer}
     */
    ChargerOperatingMode: 0 | 1 | 2 | 3 | 5;
    ChargerStateModel: {
      /** Format: uuid */
      chargerId?: string;
      /** Format: int32 */
      stateId?: number;
      stateName?: string | null;
      /** Format: date-time */
      timestamp?: string;
      valueAsString?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = InChargePingReply
     *
     * 2 = OfflineModeOverride
     *
     * 102 = RestartCharger
     *
     * 103 = RestartMcu
     *
     * 104 = UpdateSettings
     *
     * 105 = RestartNtp
     *
     * 106 = ExitAppWithCode
     *
     * 200 = UpgradeFirmware
     *
     * 201 = UpgradeFirmwareForced
     *
     * 260 = ResetComErrors
     *
     * 261 = ResetNotifications
     *
     * 262 = ResetComWarnings
     *
     * 300 = LocalSettings
     *
     * 320 = SetPlcNpw
     *
     * 321 = SetPlcCCoMode
     *
     * 322 = SetPlcNmk
     *
     * 323 = SetRemotePlcNmk
     *
     * 324 = SetRemotePlcNpw
     *
     * 501 = StartCharging
     *
     * 502 = StopCharging
     *
     * 503 = ReportChargingState
     *
     * 504 = SetSessionId
     *
     * 505 = SetUserUuid
     *
     * 506 = StopChargingFinal
     *
     * 507 = ResumeCharging
     *
     * 601 = ShowGranted
     *
     * 602 = ShowDenied
     *
     * 603 = IndicateAppConnect
     *
     * 750 = ConfirmChargeCardAdded
     *
     * 751 = SetAuthenticationList
     *
     * 800 = Debug
     *
     * 801 = GetPlcTopology
     *
     * 802 = ResetPlc
     *
     * 803 = RemoteCommand
     *
     * 804 = RunGridTest
     *
     * 805 = ClearObservationCache
     *
     * 901 = RunPostProductionTest
     *
     * 902 = GetFirmwareVersion
     *
     * 950 = DumpPilotCounter
     *
     * 951 = RunPilotTest
     *
     * 10000 = CombinedMin
     *
     * 10001 = DeauthorizeAndStop
     *
     * 10999 = CombinedMax
     * @enum {integer}
     */
    CommandId:
      | 0
      | 1
      | 2
      | 102
      | 103
      | 104
      | 105
      | 106
      | 200
      | 201
      | 260
      | 261
      | 262
      | 300
      | 320
      | 321
      | 322
      | 323
      | 324
      | 501
      | 502
      | 503
      | 504
      | 505
      | 506
      | 507
      | 601
      | 602
      | 603
      | 750
      | 751
      | 800
      | 801
      | 802
      | 803
      | 804
      | 805
      | 901
      | 902
      | 950
      | 951
      | 10000
      | 10001
      | 10999;
    /**
     * Format: int32
     * @description
     *
     * 0 = None
     *
     * 1 = Online
     *
     * 2 = Offline
     *
     * 4 = ReliableClock
     *
     * 8 = StoppedByRFID
     *
     * 16 = Signed
     *
     * 32 = Void
     *
     * 64 = Aborted
     * @enum {integer}
     */
    CommitMetadata: 0 | 1 | 2 | 4 | 8 | 16 | 32 | 64;
    ConnectionDescriptor: {
      type?: components['schemas']['ConnectionType'];
      host?: string | null;
      /** Format: int32 */
      port?: number;
      useSSL?: boolean;
      username?: string | null;
      password?: string | null;
      topic?: string | null;
      subscription?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Amqp10
     * @enum {integer}
     */
    ConnectionType: 0;
    /** @description Model containing all constants */
    ConstantsModel: {
      /** @description Key value list of languages supported in portal */
      languages?: components['schemas']['LanguageModel'][] | null;
      /** @description List of supported countries with country information */
      countries?: {
        [key: string]: components['schemas']['CountryModel'] | undefined;
      } | null;
      /** @description Key value list of installation categories */
      installationCategories?:
        | components['schemas']['InstallationCategoryModel'][]
        | null;
      /** @description List of installation types with information */
      installationTypes?: {
        [key: string]:
          | components['schemas']['InstallationTypeConstantModel']
          | undefined;
      } | null;
      /** @description List of user roles with role ID */
      userRoles?: {
        [key: string]: components['schemas']['UserRoles'] | undefined;
      } | null;
      /** @description Electrical network types (Phase and system type) */
      networkTypes?: {
        [key: string]: components['schemas']['NetworkType'] | undefined;
      } | null;
      /** @description List of charger operating modes */
      chargerOperationModes?: {
        [key: string]:
          | components['schemas']['ChargerOperatingMode']
          | undefined;
      } | null;
      /** @description Electrical phases */
      phases?: {
        [key: string]: components['schemas']['Phases'] | undefined;
      } | null;
      /** Format: uuid */
      wildcardGuid?: string;
      /** @description List of region info */
      regionalInfo?: {
        [key: string]: components['schemas']['RegionalInfoModel'] | undefined;
      } | null;
      /** @description List of codes indicating eg. info, error, .. */
      messageCodes?: {
        [key: string]: components['schemas']['MessageCode'] | undefined;
      } | null;
      /** @description List of codes used in Zaptec.ZapCloud.WebAPI.Models.Error response object */
      errorCodes?: {
        [key: string]: components['schemas']['ErrorCode'] | undefined;
      } | null;
      /**
       * @deprecated
       * @description Smart device Settings
       */
      settings?: {
        [key: string]: components['schemas']['SettingId'] | undefined;
      } | null;
      /**
       * @deprecated
       * @description Smart device Commands
       */
      commands?: {
        [key: string]: components['schemas']['CommandId'] | undefined;
      } | null;
      /**
       * @deprecated
       * @description Smart device Observations
       */
      observations?: {
        [key: string]: components['schemas']['ObservationId'] | undefined;
      } | null;
      /** @description Dict with device specific commandId, warnings and so on */
      schema?: {
        [key: string]: components['schemas']['SchemaModel'] | undefined;
      } | null;
      /** @description ZapCloud object types */
      objectTypes?: {
        [key: string]: components['schemas']['ObjectType'] | undefined;
      } | null;
      /** @description Portal frontend version */
      version?: string | null;
      /** @deprecated */
      smartWarnings?: {
        [key: string]: number | undefined;
      } | null;
      /** @deprecated */
      varisciteWarnings?: {
        [key: string]: components['schemas']['VarisciteWarnings'] | undefined;
      } | null;
      /** @description Map of all electrical phase IDs */
      phaseIdMap?: components['schemas']['PhaseIdMapConstantModel'][] | null;
      /** @description Types of log messages from devices */
      deviceLogTypes?: {
        [key: string]: components['schemas']['DeviceLogType'] | undefined;
      } | null;
      features?: {
        [key: string]: components['schemas']['Features'] | undefined;
      } | null;
      installationTypeConstraints?: {
        [key: string]: components['schemas']['ConstraintErrors'] | undefined;
      } | null;
      sessionCommitMetadata?: {
        [key: string]: components['schemas']['CommitMetadata'] | undefined;
      } | null;
      installationUpdateStatusCodes?: {
        [key: string]:
          | components['schemas']['InstallationUpdateStatusCodes']
          | undefined;
      } | null;
      entityTypes?: {
        [key: string]: components['schemas']['EntityType'] | undefined;
      } | null;
      deviceTypes?: {
        [key: string]: components['schemas']['DeviceType'] | undefined;
      } | null;
      installationAuthenticationType?: {
        [key: string]:
          | components['schemas']['InstallationAuthenticationType']
          | undefined;
      } | null;
      energyPrices?: components['schemas']['EnergyPriceConstantModel'];
      /** @description List of valid types of User Actions */
      userActionTypes?: {
        [key: string]: components['schemas']['UserActionType'] | undefined;
      } | null;
      ocppCloudUrlVersions?: {
        [key: string]: components['schemas']['OcppCloudUrlVersion'] | undefined;
      } | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Valid
     *
     * 1 = MaxCircuits
     *
     * 2 = MaxCircuitCurrent
     *
     * 4 = MaxChargers
     *
     * 8 = UnsupportedFeature
     *
     * 16 = IncompatibleCharger
     * @enum {integer}
     */
    ConstraintErrors: 0 | 1 | 2 | 4 | 8 | 16;
    CountryModel: {
      /** Format: uuid */
      id?: string;
      code?: string | null;
      name?: string | null;
      timeZoneName?: string | null;
    };
    CustomTotalChargerReportModel: {
      installationName?: string | null;
      installationAddress?: string | null;
      installationZipCode?: string | null;
      installationCity?: string | null;
      installationTimeZone?: string | null;
      groupedBy?: string | null;
      /** Format: date-time */
      fromdate?: string;
      /** Format: date-time */
      enddate?: string;
      totalUserChargerReportModel?:
        | components['schemas']['TotalUserChargerReportModel'][]
        | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = NO1
     *
     * 2 = NO2
     *
     * 3 = NO3
     *
     * 4 = NO4
     *
     * 5 = NO5
     *
     * 6 = SE1
     *
     * 7 = SE2
     *
     * 8 = SE3
     *
     * 9 = SE4
     *
     * 10 = DK1
     *
     * 11 = DK2
     *
     * 12 = FI
     * @enum {integer}
     */
    DeliveryArea: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
     * Format: int32
     * @description Determines the detail level to return.
     *
     * 0 = Summary
     *
     * 1 = EnergyDetails
     * @enum {integer}
     */
    DetailLevelFlags: 0 | 1;
    /**
     * Format: int32
     * @description
     *
     * 0 = OcppIn
     *
     * 1 = OcppOut
     *
     * 2 = OcppError
     *
     * 3 = OcppConnected
     *
     * 4 = OcppConnectionFailed
     *
     * 5 = OcppClientClose
     *
     * 6 = IotCommandExecuted
     *
     * 7 = IotCommandFailed
     *
     * 8 = IotCloudSettingUpdated
     *
     * 9 = SessionCommit
     *
     * 10 = OfflineSessionCommit
     *
     * 11 = AuthorizationRequest
     *
     * 12 = AuthorizationSuccess
     *
     * 13 = AuthorizationError
     *
     * 14 = AuthorizationFailed
     * @enum {integer}
     */
    DeviceLogType:
      | 0
      | 1
      | 2
      | 3
      | 4
      | 5
      | 6
      | 7
      | 8
      | 9
      | 10
      | 11
      | 12
      | 13
      | 14;
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = Smart
     *
     * 2 = Portable
     *
     * 3 = HomeApm
     *
     * 4 = Apollo
     *
     * 5 = OtherApm
     *
     * 6 = GenericApm
     *
     * 7 = HanApm
     * @enum {integer}
     */
    DeviceType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /** @description Energy price area info */
    EnergyPriceConstantModel: {
      deliveryArea?: {
        [key: string]: components['schemas']['DeliveryArea'] | undefined;
      } | null;
      priceUnit?: {
        [key: string]: components['schemas']['PriceUnit'] | undefined;
      } | null;
      countryDeliveryAreas?: {
        [key: string]: components['schemas']['DeliveryArea'][] | undefined;
      } | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = Installation
     *
     * 2 = Charger
     * @enum {integer}
     */
    EntityType: 0 | 1 | 2;
    /**
     * Format: int32
     * @description
     *
     * 500 = Unknown
     *
     * 503 = MissingRequiredData
     *
     * 504 = UnknownSetting
     *
     * 505 = OperationFailedForUnknownReasons
     *
     * 506 = NotApplicableForUser
     *
     * 507 = UnknownUser
     *
     * 508 = RfidTokenInUse
     *
     * 509 = SignUpTooManyRequests
     *
     * 510 = EmailInUse
     *
     * 511 = CellPhoneInUse
     *
     * 512 = UnknownObject
     *
     * 513 = InvalidPassword
     *
     * 514 = IncorrectPassword
     *
     * 515 = UserActivationLinkExpired
     *
     * 516 = LinkRequestExpired
     *
     * 517 = ChargerDeviceIdExists
     *
     * 518 = UnknownDeviceId
     *
     * 519 = UnknownCommand
     *
     * 520 = ErrorCommunicatingWithDevice
     *
     * 521 = StringIsNotAWellFormedVersion
     *
     * 522 = FirmwareVersionExists
     *
     * 523 = FirmwareFileExists
     *
     * 524 = CreateConflict
     *
     * 525 = DeviceFirmwareNotConfigured
     *
     * 526 = FeatureNotEnabled
     *
     * 527 = NotSupported
     *
     * 528 = DeviceCommandRejected
     *
     * 529 = InvalidFormat
     *
     * 530 = MailSendFailed
     *
     * 531 = ConcurrencyError
     *
     * 532 = ConfigurationError
     *
     * 533 = Forbidden
     *
     * 534 = InstallationTypeViolation
     *
     * 535 = PaymentFailed
     *
     * 536 = PaymentAuthorizationRequired
     *
     * 537 = OperationFailedActiveSubscriptions
     *
     * 538 = OperationFailedDueToChargerState
     *
     * 539 = InstallationConstraintViolation
     *
     * 540 = UnknownInstallationId
     *
     * 541 = UnknownEnergySensorId
     * @enum {integer}
     */
    ErrorCode:
      | 500
      | 503
      | 504
      | 505
      | 506
      | 507
      | 508
      | 509
      | 510
      | 511
      | 512
      | 513
      | 514
      | 515
      | 516
      | 517
      | 518
      | 519
      | 520
      | 521
      | 522
      | 523
      | 524
      | 525
      | 526
      | 527
      | 528
      | 529
      | 530
      | 531
      | 532
      | 533
      | 534
      | 535
      | 536
      | 537
      | 538
      | 539
      | 540
      | 541;
    /**
     * Format: int32
     * @description
     *
     * 0 = None
     *
     * 1 = Api_MessageSubscription
     *
     * 2 = Authentication_Internal
     *
     * 4 = PowerManagement_Apm
     *
     * 8 = PowerManagement_EcoMode
     *
     * 16 = PowerManagement_Schedule
     *
     * 32 = PowerManagement_Apm_PowerLimit
     *
     * 64 = Connectivity_4G
     *
     * 128 = Authentication_Ocpp
     *
     * 256 = PowerManagement_Apm_Tariff_PowerLimit
     *
     * 32768 = LoadBalacing
     * @enum {integer}
     */
    Features: 0 | 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 32768;
    /**
     * Format: int32
     * @description
     *
     * 0 = User
     *
     * 1 = Charger
     *
     * 2 = ChargeCardName
     * @enum {integer}
     */
    GroupByOptions: 0 | 1 | 2;
    /**
     * Format: int32
     * @description
     *
     * 0 = Native
     *
     * 1 = WebHooks
     *
     * 2 = Ocpp
     * @enum {integer}
     */
    InstallationAuthenticationType: 0 | 1 | 2;
    /**
     * Format: int32
     * @description
     *
     * 0 = Manual
     *
     * 1 = Schedule
     *
     * 2 = Auto
     * @enum {integer}
     */
    InstallationAvailableCurrentMode: 0 | 1 | 2;
    InstallationCategoryModel: {
      /** Format: uuid */
      id?: string;
      category?: string | null;
    };
    InstallationChargeHistoryModel: {
      /** Format: date-time */
      fromDate?: string;
      /** Format: date-time */
      endDate?: string;
      /** Format: uuid */
      installationId?: string | null;
      userIds?: string[] | null;
      chargerIds?: string[] | null;
      groupBy?: components['schemas']['GroupByOptions'];
    };
    InstallationChargerFirmwareModel: {
      /** Format: uuid */
      chargerId?: string;
      deviceId?: string | null;
      isOnline?: boolean | null;
      currentVersion?: string | null;
      availableVersion?: string | null;
      deviceType?: components['schemas']['DeviceType'];
      isUpToDate?: boolean | null;
    };
    /**
     * Format: int32
     * @description Determines the detail level to return for an installation.
     *
     * 0 = Default
     *
     * 1 = UserDetails
     * @enum {integer}
     */
    InstallationDetailLevelFlags: 0 | 1;
    InstallationExternalUpdateModel: {
      /**
       * Format: double
       * @description Available current to set on all phases.
       */
      availableCurrent?: number | null;
      /**
       * Format: double
       * @description Available current to set on phase 1. When setting current on individual phases, any
       * phase without specified current will be set to default.
       */
      availableCurrentPhase1?: number | null;
      /**
       * Format: double
       * @description Available current to set on phase 2. When setting current on individual phases, any
       * phase without specified current will be set to default.
       */
      availableCurrentPhase2?: number | null;
      /**
       * Format: double
       * @description Available current to set on phase 3. When setting current on individual phases, any
       * phase without specified current will be set to default.
       */
      availableCurrentPhase3?: number | null;
      /**
       * Format: double
       * @description The maximum allowed current for the installation. This setting requires caller to
       * have service permission (electrician) for the installation.
       */
      maxCurrent?: number | null;
      /**
       * @description When set to true, offline power will be limited to the chargers miniumum
       * charge current.
       */
      minPowerOfflineMode?: boolean | null;
    };
    InstallationModel: {
      /** Format: uuid */
      id?: string;
      name?: string | null;
      address?: string | null;
      zipCode?: string | null;
      city?: string | null;
      /** Format: uuid */
      countryId?: string | null;
      vatNumber?: string | null;
      contactEmail?: string | null;
      installationType?: components['schemas']['InstallationTypeCode'];
      /** Format: double */
      maxCurrent?: number | null;
      /** Format: double */
      availableCurrent?: number | null;
      /** Format: double */
      availableCurrentPhase1?: number | null;
      /** Format: double */
      availableCurrentPhase2?: number | null;
      /** Format: double */
      availableCurrentPhase3?: number | null;
      availableCurrentMode?: components['schemas']['InstallationAvailableCurrentMode'];
      availableCurrentScheduleWeekendActive?: boolean | null;
      /** Format: double */
      threeToOnePhaseSwitchCurrent?: number | null;
      /** Format: uuid */
      installationCategoryId?: string | null;
      installationCategory?: string | null;
      useLoadBalancing?: boolean | null;
      isRequiredAuthentication?: boolean | null;
      /** Format: double */
      latitude?: number | null;
      /** Format: double */
      longitude?: number | null;
      notes?: string | null;
      active?: boolean | null;
      networkType?: components['schemas']['NetworkType'];
      availableInternetAccessPLC?: boolean | null;
      availableInternetAccessWiFi?: boolean | null;
      /** Format: date-time */
      createdOnDate?: string | null;
      /** Format: date-time */
      updatedOn?: string | null;
      currentUserRoles?: components['schemas']['UserRoles'];
      authenticationType?: components['schemas']['InstallationAuthenticationType'];
      webhooksAuthPayload?: string | null;
      webhooksAuthUrl?: string | null;
      webhooksSessionStartUrl?: string | null;
      webhooksSessionEndUrl?: string | null;
      messagingEnabled?: boolean | null;
      routingId?: string | null;
      ocppCloudUrl?: string | null;
      ocppCloudUrlVersion?: components['schemas']['OcppCloudUrlVersion'];
      ocppInitialChargePointPassword?: string | null;
      /** @description Time zone display name */
      timeZoneName?: string | null;
      /** @description IANA time zone identifier */
      timeZoneIanaName?: string | null;
      updateStatusCode?: components['schemas']['InstallationUpdateStatusCodes'];
      notifications?: components['schemas']['InstallationNotifications'];
      isSubscriptionsAvailableForCurrentUser?: boolean | null;
      installationUsers?:
        | components['schemas']['InstallationUserModel'][]
        | null;
      availableFeatures?: components['schemas']['Features'];
      enabledFeatures?: components['schemas']['Features'];
      /** Format: int32 */
      activeChargerCount?: number | null;
      /** Format: int32 */
      feature_PowerManagement_EcoMode_DepartureTime?: number | null;
      /** Format: double */
      feature_PowerManagement_EcoMode_MinEnergy?: number | null;
      feature_PowerManagement_EcoMode_DeliveryArea?: components['schemas']['DeliveryArea'];
      feature_PowerManagement_Apm_SinglePhaseMappedToPhase?: components['schemas']['Phases'];
      /** Format: double */
      feature_PowerManagement_Apm_PowerBudgetKw?: number | null;
      /** Format: double */
      feature_PowerManagement_Apm_PowerRolloverPercentage?: number | null;
      /** Format: double */
      feature_PowerManagement_Apm_EvaluationMinutes?: number | null;
      /** Format: int32 */
      propertyTariffKwhLimit?: number | null;
      propertyIsMinimumPowerOfflineMode?: boolean | null;
      propertyOfflineModeAllowAnonymous?: boolean | null;
      propertyEnergySensorUniqueId?: string | null;
      energySensor?: components['schemas']['SensorModel'];
      /** Format: double */
      propertyMainFuseCurrent?: number | null;
      /** Format: int32 */
      propertyEnergySensorTransmitInterval?: number | null;
      /** Format: double */
      propertyEnergySensorTransmitThreshold?: number | null;
      /** Format: int32 */
      propertyEnergySensorAverage?: number | null;
      /** Format: double */
      propertyMinimumAvailableCurrentPhase1?: number | null;
      /** Format: double */
      propertyMinimumAvailableCurrentPhase2?: number | null;
      /** Format: double */
      propertyMinimumAvailableCurrentPhase3?: number | null;
      propertyLockToMinimumAvailableCurrent?: boolean | null;
      propertyOcppDefaultIdTag?: string | null;
      propertyExperimentalFeaturesEnabled?: components['schemas']['Features'];
      propertyEnergySensorRippleEnabled?: boolean | null;
      /** Format: int32 */
      propertyEnergySensorRippleNumBits?: number | null;
      /** Format: int32 */
      propertyEnergySensorRipplePercentBits01?: number | null;
      /** Format: int32 */
      propertyEnergySensorRipplePercentBits10?: number | null;
      propertyHomeApmOrdered?: boolean | null;
      /** Format: double */
      propertyEnergySensorScalingFactor?: number | null;
      propertyFirmwareAutomaticUpdates?: boolean | null;
      /** Format: double */
      propertyMaxSinglePhaseChargeCurrent?: number | null;
      /**
       * Format: int32
       * @description The maximum number of times a session can be stopped before the charging station will stick to single
       * phase charging. Note that start commands that require phase shifting will require a stop and will add to
       * the counter.
       */
      propertySessionMaxStopCount?: number | null;
      storageEnergySensorLastReading?: components['schemas']['SensorReadingTableEntity'];
      supportGroup?: components['schemas']['UserGroupModel'];
    };
    InstallationModelPagedData: {
      /** Format: int32 */
      pages?: number;
      data?: components['schemas']['InstallationModel'][] | null;
      message?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = None
     *
     * 1 = ServicePaymentPastDue
     *
     * 2 = ServicePaymentUnpaid
     * @enum {integer}
     */
    InstallationNotifications: 0 | 1 | 2;
    InstallationTreeChargerModel: {
      /**
       * Format: uuid
       * @description Get the unique identifier of the charge point.
       */
      id?: string;
      /** @description Get the deviceId (serialNo) of the charging stations used with the charge point. */
      deviceId?: string | null;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {DeviceId} instead.
       */
      mid?: string | null;
      /** @description Get the name of the charge point. */
      name?: string | null;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {Name} instead.
       */
      serialNo?: string | null;
      /** @description Get a value indicating whether the charge point is active. */
      active?: boolean | null;
      deviceType?: components['schemas']['DeviceType'];
    };
    InstallationTreeCircuitModel: {
      /**
       * Format: uuid
       * @description Get the unique identifier of the circuit.
       */
      id?: string;
      /** @description Get the circuit name. */
      name?: string | null;
      /**
       * Format: double
       * @description Get the circuit max current (fuse rating).
       */
      maxCurrent?: number;
      /** @description Get a value indicating whether the circuit is active. */
      isActive?: boolean;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {IsActive} instead.
       */
      active?: boolean;
      /**
       * Format: uuid
       * @description Get the unique identifier of the circuits parent installation.
       */
      installationId?: string;
      /** @description Get the name of the circuits parent installation. */
      installationName?: string | null;
      /** @description Get a list of charger installed in the circuit. */
      chargers?: components['schemas']['InstallationTreeChargerModel'][] | null;
    };
    InstallationTreeModel: {
      /**
       * Format: uuid
       * @description Get the unique identifier of the installation.
       */
      id?: string;
      /** @description Get the installation name. */
      name?: string | null;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {InstallationName} instead.
       */
      installationName?: string | null;
      /**
       * Format: int32
       * @description Get the installation electrical grid type Id. Please refer to the Zaptec integration
       * document for information for explanation of grid type Id.
       */
      networkType?: number | null;
      /** @description Get a list of circuits managed by the installation. */
      circuits?: components['schemas']['InstallationTreeCircuitModel'][] | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Pro
     *
     * 1 = Smart
     * @enum {integer}
     */
    InstallationTypeCode: 0 | 1;
    /** @description Information about installation type */
    InstallationTypeConstantModel: {
      id?: components['schemas']['InstallationTypeCode'];
      name?: string | null;
      /**
       * Format: int32
       * @description The maximum number of circuits a installation type can have
       */
      maxCircuits?: number | null;
      /**
       * Format: double
       * @description The maximum curren a installation type can have
       */
      maxCircuitCurrent?: number | null;
      /**
       * Format: int32
       * @description The maximum number of chargers a installation type can have
       */
      maxChargers?: number | null;
      defaultFeatures?: components['schemas']['Features'];
      defaultRoute?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Ok
     *
     * 1 = EcoScheduleUpdated
     * @enum {integer}
     */
    InstallationUpdateStatusCodes: 0 | 1;
    /** @description DTO for users that have charged on an installation. */
    InstallationUserModel: {
      /**
       * Format: uuid
       * @description The unique identifier for the authorized user, or null if unauthorized or
       * authorized by 3rd party.
       */
      userId?: string | null;
      /**
       * @description The full name of the authorized user, or null if unauthorized or authorized by
       * 3rd party.
       */
      userFullName?: string | null;
      /**
       * @description The email of the authorized user, or null if unauthorized or authorized by
       * 3rd party.
       */
      userEmail?: string | null;
      /** @description The RFID tokens used to authorize sessions. */
      userTokens?: string[] | null;
    };
    LanguageModel: {
      key?: string | null;
      name?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 1 = One
     *
     * 3 = Three
     * @enum {integer}
     */
    MaxPhase: 1 | 3;
    /**
     * Format: int32
     * @description
     *
     * 0 = Success
     *
     * 1 = Error
     *
     * 2 = Information
     *
     * 3 = Warning
     *
     * 500 = KnownErrors
     *
     * 501 = UnknownObject
     * @enum {integer}
     */
    MessageCode: 0 | 1 | 2 | 3 | 500 | 501;
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = IT_1_Phase
     *
     * 2 = IT_3_Phase
     *
     * 3 = TN_1_Phase
     *
     * 4 = TN_3_Phase
     * @enum {integer}
     */
    NetworkType: 0 | 1 | 2 | 3 | 4;
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = Installation
     *
     * 2 = Circuit
     *
     * 3 = Charger
     *
     * 4 = User
     *
     * 5 = UserGroup
     *
     * 6 = InactiveUser
     *
     * 7 = InvitedUser
     *
     * 8 = Country
     * @enum {integer}
     */
    ObjectType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = OfflineMode
     *
     * 120 = AuthenticationRequired
     *
     * 130 = PaymentActive
     *
     * 131 = PaymentCurrency
     *
     * 132 = PaymentSessionUnitPrice
     *
     * 133 = PaymentEnergyUnitPrice
     *
     * 134 = PaymentTimeUnitPrice
     *
     * 150 = CommunicationMode
     *
     * 151 = PermanentCableLock
     *
     * 152 = ProductCode
     *
     * 153 = HmiBrightness
     *
     * 154 = LockCableWhenConnected
     *
     * 155 = SoftStartDisabled
     *
     * 156 = FirmwareApiHost
     *
     * 170 = MIDBlinkEnabled
     *
     * 180 = ProductionTesterEnabled
     *
     * 181 = ProductionTestStationOverride
     *
     * 201 = TemperatureInternal5
     *
     * 202 = TemperatureInternal6
     *
     * 203 = TemperatureInternalLimit
     *
     * 241 = TemperatureInternalMaxLimit
     *
     * 270 = Humidity
     *
     * 280 = TamperCover
     *
     * 501 = VoltagePhase1
     *
     * 502 = VoltagePhase2
     *
     * 503 = VoltagePhase3
     *
     * 507 = CurrentPhase1
     *
     * 508 = CurrentPhase2
     *
     * 509 = CurrentPhase3
     *
     * 510 = ChargerMaxCurrent
     *
     * 511 = ChargerMinCurrent
     *
     * 512 = ActivePhases
     *
     * 513 = TotalChargePower
     *
     * 515 = RcdCurrent
     *
     * 517 = Internal12vCurrent
     *
     * 518 = PowerFactor
     *
     * 519 = SetPhases
     *
     * 520 = MaxPhases
     *
     * 522 = ChargerOfflinePhase
     *
     * 523 = ChargerOfflineCurrent
     *
     * 540 = RcdCalibration
     *
     * 541 = RcdCalibrationNoise
     *
     * 553 = TotalChargePowerSession
     *
     * 554 = SignedMeterValue
     *
     * 555 = SignedMeterValueInterval
     *
     * 560 = SessionEnergyCountExportActive
     *
     * 561 = SessionEnergyCountExportReactive
     *
     * 562 = SessionEnergyCountImportActive
     *
     * 563 = SessionEnergyCountImportReactive
     *
     * 570 = SoftStartTime
     *
     * 701 = ChargeDuration
     *
     * 702 = ChargeMode
     *
     * 703 = ChargePilotLevelInstant
     *
     * 704 = ChargePilotLevelAverage
     *
     * 706 = PilotVsProximityTime
     *
     * 707 = ChargeCurrentInstallationMaxLimit
     *
     * 708 = ChargeCurrentSet
     *
     * 710 = ChargerOperationMode
     *
     * 711 = IsEnabled
     *
     * 712 = IsStandAlone
     *
     * 713 = ChargerCurrentUserUuidDeprecated
     *
     * 714 = CableType
     *
     * 715 = NetworkType
     *
     * 716 = DetectedCar
     *
     * 717 = GridTestResult
     *
     * 718 = FinalStopActive
     *
     * 721 = SessionIdentifier
     *
     * 722 = ChargerCurrentUserUuid
     *
     * 723 = CompletedSession
     *
     * 724 = PlugAndChargeAuthorizeRequest
     *
     * 750 = NewChargeCard
     *
     * 751 = AuthenticationListVersion
     *
     * 752 = EnabledNfcTechnologies
     *
     * 753 = LteRoamingDisabled
     *
     * 760 = Location
     *
     * 761 = TimeZone
     *
     * 762 = TimeSchedule
     *
     * 763 = NextScheduleEvent
     *
     * 764 = MaxStartDelay
     *
     * 800 = InstallationId
     *
     * 801 = RoutingId
     *
     * 803 = Notifications
     *
     * 804 = Warnings
     *
     * 805 = DiagnosticsMode
     *
     * 807 = InternalDiagnosticsLog
     *
     * 808 = DiagnosticsString
     *
     * 809 = CommunicationSignalStrength
     *
     * 810 = CloudConnectionStatus
     *
     * 811 = McuResetSource
     *
     * 812 = McuRxErrors
     *
     * 813 = McuToVariscitePacketErrors
     *
     * 814 = VarisciteToMcuPacketErrors
     *
     * 820 = UptimeVariscite
     *
     * 821 = UptimeMCU
     *
     * 830 = SecurityLog
     *
     * 850 = CarSessionLog
     *
     * 851 = CommunicationModeConfigurationInconsistency
     *
     * 852 = RawPilotMonitor
     *
     * 853 = IT3PhaseDiagnosticsLog
     *
     * 854 = PilotTestResults
     *
     * 855 = UnconditionalNfcDetectionIndication
     *
     * 899 = EmcTestCounter
     *
     * 900 = ProductionTestResults
     *
     * 901 = PostProductionTestResults
     *
     * 908 = SmartMainboardSoftwareApplicationVersion
     *
     * 909 = SmartMainboardSoftwareBootloaderVersion
     *
     * 911 = SmartComputerSoftwareApplicationVersion
     *
     * 912 = SmartComputerSoftwareBootloaderVersion
     *
     * 913 = SmartComputerHardwareVersion
     *
     * 950 = MacMain
     *
     * 951 = MacPlcModuleGrid
     *
     * 952 = MacWiFi
     *
     * 953 = MacPlcModuleEv
     *
     * 960 = LteImsi
     *
     * 961 = LteMsisdn
     *
     * 962 = LteIccid
     *
     * 963 = LteImei
     *
     * 970 = ProductionTestStationNumber
     *
     * 980 = MIDCalibration
     *
     * -3 = IsOcppConnected
     *
     * -2 = IsOnline
     *
     * -1 = Pulse
     * @enum {integer}
     */
    ObservationId:
      | 0
      | 1
      | 120
      | 130
      | 131
      | 132
      | 133
      | 134
      | 150
      | 151
      | 152
      | 153
      | 154
      | 155
      | 156
      | 170
      | 180
      | 181
      | 201
      | 202
      | 203
      | 241
      | 270
      | 280
      | 501
      | 502
      | 503
      | 507
      | 508
      | 509
      | 510
      | 511
      | 512
      | 513
      | 515
      | 517
      | 518
      | 519
      | 520
      | 522
      | 523
      | 540
      | 541
      | 553
      | 554
      | 555
      | 560
      | 561
      | 562
      | 563
      | 570
      | 701
      | 702
      | 703
      | 704
      | 706
      | 707
      | 708
      | 710
      | 711
      | 712
      | 713
      | 714
      | 715
      | 716
      | 717
      | 718
      | 721
      | 722
      | 723
      | 724
      | 750
      | 751
      | 752
      | 753
      | 760
      | 761
      | 762
      | 763
      | 764
      | 800
      | 801
      | 803
      | 804
      | 805
      | 807
      | 808
      | 809
      | 810
      | 811
      | 812
      | 813
      | 814
      | 820
      | 821
      | 830
      | 850
      | 851
      | 852
      | 853
      | 854
      | 855
      | 899
      | 900
      | 901
      | 908
      | 909
      | 911
      | 912
      | 913
      | 950
      | 951
      | 952
      | 953
      | 960
      | 961
      | 962
      | 963
      | 970
      | 980
      | -3
      | -2
      | -1;
    /**
     * Format: int32
     * @description
     *
     * 0 = Legacy
     *
     * 1 = Ocpp16Compliant
     * @enum {integer}
     */
    OcppCloudUrlVersion: 0 | 1;
    /** @description Electrical phase info */
    PhaseIdMapConstantModel: {
      /** Format: int32 */
      id?: number;
      phases?: components['schemas']['Phases'];
      networkFamily?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = None
     *
     * 1 = Phase_1
     *
     * 2 = Phase_2
     *
     * 4 = Phase_3
     *
     * 7 = All
     * @enum {integer}
     */
    Phases: 0 | 1 | 2 | 4 | 7;
    /**
     * Format: int32
     * @description
     *
     * 0 = Unsupported
     *
     * 1 = EuroPerMWh
     * @enum {integer}
     */
    PriceUnit: 0 | 1;
    RegionalInfoModel: {
      regionName?: string | null;
      name?: string | null;
      nativeName?: string | null;
      currencySymbol?: string | null;
      currencyName?: string | null;
      currencyNativeName?: string | null;
      isoCurrencySymbol?: string | null;
    };
    /** @description Device schema */
    SchemaModel: {
      /** Format: int32 */
      deviceType?: number;
      observationIds?: Record<string, unknown> | null;
      commandIds?: Record<string, unknown> | null;
      settingIds?: Record<string, unknown> | null;
      warnings?: Record<string, unknown> | null;
    };
    SensorModel: {
      uniqueId?: string | null;
      type?: components['schemas']['SensorType'];
      provider?: string | null;
      vendor?: string | null;
      model?: string | null;
      serialNo?: string | null;
      /** Format: uuid */
      id?: string | null;
    };
    SensorReadingTableEntity: {
      partitionKey?: string | null;
      rowKey?: string | null;
      /** Format: date-time */
      timestamp?: string;
      eTag?: string | null;
      uniqueId?: string | null;
      /** Format: date-time */
      observedAt?: string;
      /** Format: double */
      currentPhase1?: number;
      /** Format: double */
      currentPhase2?: number;
      /** Format: double */
      currentPhase3?: number;
      /** Format: double */
      chargeCurrentPhase1?: number;
      /** Format: double */
      chargeCurrentPhase2?: number;
      /** Format: double */
      chargeCurrentPhase3?: number;
      /** Format: double */
      availableCurrentPhase1?: number | null;
      /** Format: double */
      availableCurrentPhase2?: number | null;
      /** Format: double */
      availableCurrentPhase3?: number | null;
      /** Format: double */
      currentNeutral?: number | null;
      /** Format: double */
      voltagePhase1?: number | null;
      /** Format: double */
      voltagePhase2?: number | null;
      /** Format: double */
      voltagePhase3?: number | null;
      statusCode?: string | null;
      statusMessage?: string | null;
      /** Format: int32 */
      ripple?: number | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = Unknown
     *
     * 1 = Energy
     *
     * 3 = EnergyWithRipple
     * @enum {integer}
     */
    SensorType: 0 | 1 | 3;
    /**
     * @description ISessionEndRequest with optional SessionEnd to allow for both complete and incomplete
     * sessions.
     */
    SessionEndData: {
      /** Format: double */
      energy?: number;
      /** Format: date-time */
      sessionEnd?: string | null;
      /** Format: uuid */
      sessionId?: string;
      /** Format: date-time */
      sessionStart?: string;
      signedSession?: string | null;
    };
    SessionEnergyDetailsModel: {
      /** Format: date-time */
      timestamp?: string;
      /** Format: double */
      energy?: number;
    };
    SessionListModel: {
      /**
       * Format: uuid
       * @description Unique session identifier.
       */
      id?: string;
      /** @description The serial number of the charging station. */
      deviceId?: string | null;
      /**
       * Format: date-time
       * @description Session start time.
       * <br>
       * Time of session authorization. Usually corresponds within a few seconds to the
       * connection time, but can in some cases be delayed if users does not authorize
       * immediately.
       */
      startDateTime?: string;
      /**
       * Format: date-time
       * @description For chargers with firmware >= 3.2, this property indicates when the session was
       * closed by the cloud solution. For sessions recorded when the charging station was
       * online, this is usually identical to the time of disconnect. For offline sessions,
       * this is not the case as the session may be received by our backend a long time after
       * the actual charge took place. For charging stations with firmware >= 3.2 you
       * should use the Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.CommitEndDateTime to get the actual end time of the
       * session.
       * <br>
       * For charging stations with firmware < 3.2, this property indicates the time when
       * the session was closed. Please note that Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.StartDateTime,
       * Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.EndDateTime and Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.Energy may be inaccurate in some scenarios
       * when using these firmware versions. For accurate session handling it is recommended
       * to use firmware >= 3.2 and Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.CommitEndDateTime.
       */
      endDateTime?: string | null;
      /**
       * Format: double
       * @description Energy delivered during the session in kWh.
       */
      energy?: number;
      commitMetadata?: components['schemas']['CommitMetadata'];
      /**
       * Format: date-time
       * @description This is only supported for charging stations with firmware >= 3.2 and indicates
       * the actual end time of the session. In most cases equal to the time of disconnect.
       */
      commitEndDateTime?: string | null;
      /**
       * @description The full name of the authorized user, or null if unauthorized or authorized by
       * 3rd party.
       */
      userFullName?: string | null;
      /**
       * Format: uuid
       * @description The charge point unique identifier.
       */
      chargerId?: string | null;
      /** @description The charge point name. */
      deviceName?: string | null;
      /**
       * @description The email of the authorized user, or null if unauthorized or authorized by
       * 3rd party.
       */
      userEmail?: string | null;
      /**
       * Format: uuid
       * @description Get the unique identifier for the authorized user, or null if unauthorized or
       * authorized by 3rd party.
       */
      userId?: string | null;
      /** @description The RFID token used to authorize the session. */
      tokenName?: string | null;
      /**
       * @description The external identifier for the session if authorized by 3rd party (e.g. transactionId
       * from OCPP), or null if not authorized by 3rd party.
       */
      externalId?: string | null;
      /** @description Indicates when the session was finalized with 3rd party. */
      externallyEnded?: boolean;
      energyDetails?:
        | components['schemas']['SessionEnergyDetailsModel'][]
        | null;
      chargerFirmwareVersion?: components['schemas']['Version'];
      /** @description An OCMF signed session for supported charging stations. */
      signedSession?: string | null;
      /**
       * Format: uuid
       * @description In some cases a session has to be corrected after it's been created. Since session
       * start is notified to 3rd parties when session is created, we need to replace sessions
       * to correct this. This property indicates what session is replacing the current one.
       * Replaced sessions will also be marked as Zaptec.ZapCloud.Domain.Entities.CommitMetadata.Void
       * in Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.CommitMetadata, and will have no duration or energy.
       */
      replacedBySessionId?: string | null;
      /**
       * @deprecated
       * @description Property is deprecated and an alias for Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.UserEmail.
       * Please use Zaptec.ZapCloud.WebAPI.Models.Sessions.SessionModel.UserEmail instead.
       */
      userUserName?: string | null;
    };
    SessionListModelPagedData: {
      /** Format: int32 */
      pages?: number;
      data?: components['schemas']['SessionListModel'][] | null;
      message?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 120 = AuthenticationRequired
     *
     * 130 = PaymentActive
     *
     * 131 = PaymentCurrency
     *
     * 132 = PaymentSessionUnitPrice
     *
     * 133 = PaymentEnergyUnitPrice
     *
     * 134 = PaymentTimeUnitPrice
     *
     * 150 = CommunicationMode
     *
     * 151 = PermanentCableLock
     *
     * 153 = HmiBrightness
     *
     * 154 = LockCableWhenConnected
     *
     * 155 = SoftStartDisabled
     *
     * 170 = MIDBlinkEnabled
     *
     * 510 = CurrentInMaximum
     *
     * 511 = CurrentInMinimum
     *
     * 520 = MaxPhases
     *
     * 522 = DefaultOfflinePhase
     *
     * 523 = DefaultOfflineCurrent
     *
     * 555 = SignedMeterValueInterval
     *
     * 707 = ChargeCurrentInstallationMaxLimit
     *
     * 711 = IsEnabled
     *
     * 712 = Standalone
     *
     * 715 = NetworkType
     *
     * 752 = EnabledNfcTechnologies
     *
     * 753 = LteRoamingDisabled
     *
     * 800 = InstallationId
     *
     * 801 = RoutingId
     *
     * 802 = ChargePointName
     *
     * 805 = DiagnosticsMode
     *
     * 806 = DisableBLEChargePointName
     *
     * 807 = InternalDiagnosticsLog
     *
     * 855 = UnconditionalNfcDetectionIndication
     * @enum {integer}
     */
    SettingId:
      | 120
      | 130
      | 131
      | 132
      | 133
      | 134
      | 150
      | 151
      | 153
      | 154
      | 155
      | 170
      | 510
      | 511
      | 520
      | 522
      | 523
      | 555
      | 707
      | 711
      | 712
      | 715
      | 752
      | 753
      | 800
      | 801
      | 802
      | 805
      | 806
      | 807
      | 855;
    TotalUserChargerReportModel: {
      groupAsString?: string | null;
      userDetails?: components['schemas']['TotalUserChargerReportUserModel'];
      /** Format: double */
      totalChargeSessionCount?: number;
      /** Format: double */
      totalChargeSessionEnergy?: number;
      /** Format: double */
      totalChargeSessionDuration?: number;
    };
    TotalUserChargerReportUserModel: {
      /** Format: uuid */
      id?: string;
      email?: string | null;
      fullName?: string | null;
    };
    /**
     * Format: int32
     * @description
     *
     * 1 = AddSense
     * @enum {integer}
     */
    UserActionType: 1;
    UserGroupModel: {
      /** Format: uuid */
      id?: string | null;
      name?: string | null;
      /** Format: date-time */
      createdOn?: string | null;
      /** Format: date-time */
      updatedOn?: string | null;
      lookupKey?: string | null;
      currentUserRoles?: components['schemas']['UserRoles'];
      protected?: boolean;
      serviceLevelSupport?: boolean | null;
      /** Format: uuid */
      logoId?: string | null;
      logoContentType?: string | null;
      logoBase64?: string | null;
      supportUrl?: string | null;
      supportEmail?: string | null;
      supportPhone?: string | null;
      supportDetails?: string | null;
      propertyMessagingAllowed?: boolean | null;
      propertyMessagingEnabled?: boolean | null;
      transferrableExperimentalFeatures?: components['schemas']['Features'];
    };
    /**
     * Format: int32
     * @description
     *
     * 0 = None
     *
     * 1 = User
     *
     * 2 = Owner
     *
     * 4 = Maintainer
     *
     * 8 = Administrator
     *
     * 15 = Any
     *
     * 16 = Onboarding
     *
     * 32 = DeviceAdministrator
     *
     * 64 = PartnerAdministrator
     *
     * 128 = Technical
     *
     * 256 = InternalData
     * @enum {integer}
     */
    UserRoles: 0 | 1 | 2 | 4 | 8 | 15 | 16 | 32 | 64 | 128 | 256;
    /**
     * Format: int32
     * @description
     *
     * 1 = WARNING_MCU_BOOTLOADER
     *
     * 2 = WARNING_FPGA_INIT_FAILED
     *
     * 4 = WARNING_VARISCITE_ILLEGAL_PHASE
     * @enum {integer}
     */
    VarisciteWarnings: 1 | 2 | 4;
    Version: {
      /** Format: int32 */
      major?: number;
      /** Format: int32 */
      minor?: number;
      /** Format: int32 */
      build?: number;
      /** Format: int32 */
      revision?: number;
      /** Format: int32 */
      majorRevision?: number;
      /** Format: int32 */
      minorRevision?: number;
    };
    ZapChargerViewModel: {
      /**
       * Format: uuid
       * @description Get the unique identifier of the charge point.
       */
      id?: string;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {DeviceId} instead.
       */
      mid?: string | null;
      /** @description Get the deviceId (serialNo) of the charging stations used with the charge point. */
      deviceId?: string | null;
      /**
       * @deprecated
       * @description <strong>This property is obsolete and is scheduled for removal,</strong>
       *             please use {Name} instead.
       */
      serialNo?: string | null;
      /** @description Get the name of the charge point. */
      name?: string | null;
      /**
       * Format: date-time
       * @description Get the date and time the installation was created.
       */
      createdOnDate?: string | null;
      /**
       * Format: uuid
       * @description Get the unique identifier the charge point is installed in.
       */
      circuitId?: string | null;
      /** @description Get a value indicating whether the charge point is active. */
      active?: boolean | null;
      currentUserRoles?: components['schemas']['UserRoles'];
      /**
       * @description Get the charger PIN code. This will only be provided if your user is system owner
       * for the charge point.
       */
      pin?: string | null;
      /**
       * Format: uuid
       * @description Get the unique identifier of the chargers firmware template.
       */
      templateId?: string | null;
      propertyOcppUrl?: string | null;
      propertyOcppPassword?: string | null;
      propertyPinOfflinePhase?: boolean | null;
      propertyAuthenticationDisabled?: boolean | null;
      hasSessions?: boolean | null;
      propertyOfflinePhaseOverride?: components['schemas']['Phases'];
      /** Format: double */
      propertyOfflineCurrentOverride?: number | null;
      /** Format: date-time */
      propertyOcppVerboseLogUntil?: string | null;
      propertyOcppDefaultIdTag?: string | null;
      /** Format: int32 */
      propertyOcppWebSocketPingInterval?: number | null;
      /** Format: double */
      propertyPrioritizedCurrent?: number | null;
      propertyPrioritizedPhases?: components['schemas']['MaxPhase'];
      /** Format: double */
      propertyMaxSinglePhaseChargeCurrent?: number | null;
      /** Format: int32 */
      propertyOcppAvailability?: number | null;
      /** Format: int32 */
      propertyOcppOfflineListVersion?: number | null;
      /** Format: double */
      signedMeterValueKwh?: number | null;
      signedMeterValue?: string | null;
      deviceType?: components['schemas']['DeviceType'];
      installationName?: string | null;
      /** Format: uuid */
      installationId?: string | null;
      authenticationType?: components['schemas']['InstallationAuthenticationType'];
      isAuthorizationRequired?: boolean | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
